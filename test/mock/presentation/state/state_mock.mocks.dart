// Mocks generated by Mockito 5.4.2 from annotations
// in tasks_riverpod/test/mock/presentation/state/state_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasks_riverpod/presentation/state/state.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [State].
///
/// See the documentation for Mockito's code generation for more information.
class MockState<T> extends _i1.Mock implements _i2.State<T> {
  MockState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get isInit => (super.noSuchMethod(
        Invocation.getter(#isInit),
        returnValue: false,
      ) as bool);

  @override
  bool get isLoading => (super.noSuchMethod(
        Invocation.getter(#isLoading),
        returnValue: false,
      ) as bool);

  @override
  bool get isSuccess => (super.noSuchMethod(
        Invocation.getter(#isSuccess),
        returnValue: false,
      ) as bool);

  @override
  bool get isError => (super.noSuchMethod(
        Invocation.getter(#isError),
        returnValue: false,
      ) as bool);
}
