// Mocks generated by Mockito 5.4.2 from annotations
// in tasks_riverpod/test/mock/presentation/viewmodel/taskform/taskform_viewmodel_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:tasks_riverpod/presentation/viewmodel/taskform/task_form_viewmodel.dart'
    as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDateTime_0 extends _i1.SmartFake implements DateTime {
  _FakeDateTime_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [TaskFormViewModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockTaskFormViewModel extends _i1.Mock implements _i2.TaskFormViewModel {
  MockTaskFormViewModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String appBarTitle() => (super.noSuchMethod(
        Invocation.method(
          #appBarTitle,
          [],
        ),
        returnValue: '',
      ) as String);

  @override
  String initialTitleValue() => (super.noSuchMethod(
        Invocation.method(
          #initialTitleValue,
          [],
        ),
        returnValue: '',
      ) as String);

  @override
  String initialDescriptionValue() => (super.noSuchMethod(
        Invocation.method(
          #initialDescriptionValue,
          [],
        ),
        returnValue: '',
      ) as String);

  @override
  DateTime initialDueDateValue() => (super.noSuchMethod(
        Invocation.method(
          #initialDueDateValue,
          [],
        ),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.method(
            #initialDueDateValue,
            [],
          ),
        ),
      ) as DateTime);

  @override
  DateTime datePickerFirstDate() => (super.noSuchMethod(
        Invocation.method(
          #datePickerFirstDate,
          [],
        ),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.method(
            #datePickerFirstDate,
            [],
          ),
        ),
      ) as DateTime);

  @override
  DateTime datePickerLastDate() => (super.noSuchMethod(
        Invocation.method(
          #datePickerLastDate,
          [],
        ),
        returnValue: _FakeDateTime_0(
          this,
          Invocation.method(
            #datePickerLastDate,
            [],
          ),
        ),
      ) as DateTime);

  @override
  bool shouldShowDeleteTaskIcon() => (super.noSuchMethod(
        Invocation.method(
          #shouldShowDeleteTaskIcon,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  dynamic setTitle(String? value) => super.noSuchMethod(Invocation.method(
        #setTitle,
        [value],
      ));

  @override
  dynamic setDescription(String? value) => super.noSuchMethod(Invocation.method(
        #setDescription,
        [value],
      ));

  @override
  dynamic setTodoStatus(bool? status) => super.noSuchMethod(Invocation.method(
        #setTodoStatus,
        [status],
      ));

  @override
  dynamic setDueDate(DateTime? value) => super.noSuchMethod(Invocation.method(
        #setDueDate,
        [value],
      ));
}
